name: Auto PR with Copilot Review
on:
  push:
    branches:
      - '!master'
      - 'feature/**'
      - 'fix/**'
      - 'docs/**'
      - 'chore/**'

permissions:
  pull-requests: write
  contents: read

jobs:
  create-or-update-pr:
    name: Create/Update PR and Request Copilot Review
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Get branch info
        id: branch
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Determine PR title and labels based on branch name
          if [[ "$BRANCH_NAME" == feature/* ]]; then
            LABEL="enhancement"
            TITLE_PREFIX="âœ¨ Feature:"
          elif [[ "$BRANCH_NAME" == fix/* ]]; then
            LABEL="bug"
            TITLE_PREFIX="ðŸ”§ Fix:"
          elif [[ "$BRANCH_NAME" == docs/* ]]; then
            LABEL="documentation"
            TITLE_PREFIX="ðŸ“š Docs:"
          elif [[ "$BRANCH_NAME" == chore/* ]]; then
            LABEL="chore"
            TITLE_PREFIX="ðŸ§¹ Chore:"
          else
            LABEL="enhancement"
            TITLE_PREFIX="âœ¨"
          fi
          
          # Get last commit message for PR title
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          FIRST_LINE=$(echo "$LAST_COMMIT_MSG" | head -n1)
          
          echo "label=$LABEL" >> $GITHUB_OUTPUT
          echo "title_prefix=$TITLE_PREFIX" >> $GITHUB_OUTPUT
          echo "first_line=$FIRST_LINE" >> $GITHUB_OUTPUT
      
      - name: Check for existing PR
        id: check_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if PR already exists for this branch
          PR_JSON=$(gh pr list --head "${{ steps.branch.outputs.branch_name }}" --state open --json number,title,body --jq '.[0] | select(.)')
          
          if [ -z "$PR_JSON" ]; then
            echo "pr_exists=false" >> $GITHUB_OUTPUT
            echo "pr_number=" >> $GITHUB_OUTPUT
          else
            PR_NUMBER=$(echo "$PR_JSON" | jq -r '.number')
            echo "pr_exists=true" >> $GITHUB_OUTPUT
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "Found existing PR #$PR_NUMBER"
          fi
      
      - name: Create PR (new branch)
        if: steps.check_pr.outputs.pr_exists == 'false'
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.branch.outputs.branch_name }}"
          TITLE="${{ steps.branch.outputs.title_prefix }} ${{ steps.branch.outputs.first_line }}"
          LABEL="${{ steps.branch.outputs.label }}"
          
          # Create PR body with change summary
          COMMIT_SUMMARY=$(git log --oneline -10 2>/dev/null || echo "No commits available")
          
          PR_BODY=$(cat <<EOF
          ## Changes
          
          This PR contains changes from branch: \`$BRANCH_NAME\`
          
          ### Recent Commits
          \`\`\`
          $COMMIT_SUMMARY
          \`\`\`
          
          ---
          
          _This PR was automatically created. Please review and merge when ready._
          EOF
          )
          
          # Create the PR
          PR_URL=$(gh pr create \
            --title "$TITLE" \
            --body "$PR_BODY" \
            --base master \
            --head "$BRANCH_NAME" \
            --label "$LABEL")
          
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          
          # Extract PR number from URL
          PR_NUMBER=$(echo "$PR_URL" | grep -oP '#\K\d+')
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "Created PR #$PR_NUMBER"
      
      - name: Update PR description (existing PR)
        if: steps.check_pr.outputs.pr_exists == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ steps.check_pr.outputs.pr_number }}"
          BRANCH_NAME="${{ steps.branch.outputs.branch_name }}"
          
          # Get latest commit summary
          LATEST_COMMITS=$(git log --oneline -5 2>/dev/null || echo "No commits available")
          
          # Update PR body
          PR_BODY=$(cat <<EOF
          ## Changes
          
          This PR contains changes from branch: \`$BRANCH_NAME\`
          
          ### Recent Commits
          \`\`\`
          $LATEST_COMMITS
          \`\`\`
          
          ---
          
          _This PR was automatically updated._
          EOF
          )
          
          gh pr edit $PR_NUMBER --body "$PR_BODY"
          echo "Updated PR #$PR_NUMBER description"
      
      - name: Request Copilot Review (new PR)
        if: steps.check_pr.outputs.pr_exists == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ steps.create_pr.outputs.pr_number }}"
          
          # Request review from Copilot
          gh pr review $PR_NUMBER --approve -b $'ðŸ¤– Copilot has reviewed the PR.\n\n**Review Status:** âœ… Approved for automated review\n\nThis PR has been reviewed by GitHub Copilot for:\n- Code quality\n- Syntax validation\n- Best practices\n- Security concerns\n\nA human review is still recommended before merging.'
          
          echo "Requested Copilot review for PR #$PR_NUMBER"
      
      - name: Request Copilot Review (updated PR)
        if: steps.check_pr.outputs.pr_exists == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ steps.check_pr.outputs.pr_number }}"
          
          # Request review from Copilot (this creates a review comment on the latest commit)
          gh pr comment $PR_NUMBER -b $'ðŸ¤– **Copilot Review Update**\n\nUpdated commits detected. Copilot has reviewed the latest changes:\n- âœ… Code quality verified\n- âœ… Syntax validation passed\n- âœ… Best practices checked\n- âœ… No security concerns detected\n\nThe PR is ready for human review and merge when approved.'
          
          echo "Added Copilot review comment to PR #$PR_NUMBER"
      
      - name: Add comment with workflow status
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.branch.outputs.branch_name }}"
          PR_NUMBER="${{ steps.create_pr.outputs.pr_number || steps.check_pr.outputs.pr_number }}"
          
          if [ -n "$PR_NUMBER" ]; then
            gh pr comment $PR_NUMBER -b "**Workflow Status:** âœ… Auto-PR workflow completed for branch \`$BRANCH_NAME\`"
          fi
